{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red42\green49\blue64;\red245\green245\blue246;\red208\green208\blue220;
\red39\green40\blue50;\red39\green129\blue201;\red0\green0\blue0;\red255\green255\blue255;\red235\green16\blue47;
\red20\green152\blue106;\red212\green20\blue102;}
{\*\expandedcolortbl;;\cssrgb\c21569\c25490\c31765;\cssrgb\c96863\c96863\c97255;\cssrgb\c85098\c85098\c89020;
\cssrgb\c20392\c20784\c25490;\cssrgb\c18039\c58431\c82745;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c94902\c17255\c23922;
\cssrgb\c0\c65098\c49020;\cssrgb\c87451\c18824\c47451;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh18400\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Part 1: Computer Graphics (with WebGL)\
Introduction\
Computer graphics is a fascinating field that deals with generating images, animations, and videos using computers. The field has come a long way in the last 50 years, evolving from displaying simple lines on cathode-ray tubes to generating photorealistic images of real objects. This evolution has been driven by the rapid advancement of computer hardware and software technologies. In this paper, we will discuss the evolution of computer graphics in the last 50 years and how WebGL fits into this picture. Additionally, we will highlight a few scenarios where computer graphics have significantly improved various fields, such as the movie industry.\
Evolution of Computer Graphics\
Computer graphics began in the 1960s, and one of the first graphics systems was the Sketchpad, developed by Ivan Sutherland in 1963. The Sketchpad was an interactive drawing system that allowed users to create and manipulate graphics on a computer screen using a light pen. Later, in the 1970s, the first color graphics displays were introduced, which led to the development of CAD systems, allowing engineers and architects to create and design complex objects using computers.\
In the 1980s, computer graphics advanced rapidly, thanks to the availability of powerful microprocessors and graphics hardware. This period saw the development of computer animation and 3D modeling software, which made it possible to create virtual environments that could be manipulated in real-time. Also, during this period, Pixar, a company that would revolutionize computer animation, was founded.\
In the 1990s, computer graphics continued to evolve, and the development of the World Wide Web and the availability of fast internet connections allowed for the delivery of images and animations over the internet. This period also saw the development of Virtual Reality (VR) systems, which allowed users to immerse themselves in virtual environments.\
In the 2000s, computer graphics technology continued to advance rapidly, and the development of powerful graphics processing units (GPUs) enabled the generation of photorealistic images in real-time. This period also saw the development of WebGL, which is a web-based graphics library that enables the generation of 3D graphics in web browsers.\
WebGL and Its Application\
WebGL is a powerful graphics library that enables the generation of 3D graphics in web browsers. It is a JavaScript API that enables the use of the graphics processing unit (GPU) for rendering 2D and 3D graphics. WebGL is based on OpenGL, a graphics API widely used in desktop applications. WebGL brings the power of desktop graphics to web browsers, enabling the creation of sophisticated 3D graphics and animations.\
WebGL has numerous applications in various fields, including architecture, education, advertising, and entertainment. One real-life scenario where WebGL has significantly improved a field is in the movie industry. Computer-generated imagery (CGI) has revol utionized the movie industry, enabling filmmakers to create stunning visual effects that would be impossible to achieve using traditional filming techniques. For instance, in the 2019 movie "The Lion King," the entire movie was created using CGI, resulting in stunning photorealistic images of animals that looked almost identical to their real-life counterparts. This achievement was possible thanks to the use of powerful computers and software tools, including WebGL.\
\pard\pardeftab720\partightenfactor0
\cf2 Using Computer Graphics Enhancements\
Using computer graphics enhancements is better than the earlier alternatives for various reasons. Firstly, computer graphics enable the generation of realistic images and animations that would be impossible to achieve using traditional methods. For instance, computer graphics enable the creation of complex and highly detailed objects that can be manipulated in real-time, enabling engineers and architects to create complex structures more efficiently. Additionally, computer graphics enable the creation of virtual environments that can be used for training purposes. For example, pilots can be trained using flight simulators that generate realistic virtual\
\
PART-2\
\
\
\pard\pardeftab720\sa400\partightenfactor0
\cf2 The Sierpinski Gasket is a fractal pattern that is named after the Polish mathematician Wac\uc0\u322 aw Sierpi\u324 ski. The pattern consists of a triangle that is subdivided recursively into smaller triangles. The Sierpinski Gasket is often used as a visual representation of a fractal structure and has been used in computer graphics, art, and digital image processing.\
One real-life scenario where the Sierpinski Gasket can be utilized is in computer graphics and art. It can be used to generate complex patterns and textures by varying the colors of the different triangles. The self-similarity of the pattern allows it to be scaled up or down without losing its structure or detail. Additionally, the Sierpinski Gasket can be used as a test image for image compression and reconstruction algorithms.\
To generate the Sierpinski Gasket using Python programming language, we can use recursion to implement the steps. Here is a sample code that uses the turtle module in Python to draw the Sierpinski Gasket:\
\pard\pardeftab720\partightenfactor0

\fs18 \cf4 \cb5 \strokec4 python\cb1 \
\pard\pardeftab720\qc\partightenfactor0

\fs24 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 Copy code
\f1\fs21 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \strokec6 import\cf8 \strokec8  turtle \cf6 \strokec6 def\cf8 \strokec8  \cf9 \strokec9 sierpinski\cf8 \strokec8 (points, depth, my_turtle): colors = [\cf10 \strokec10 "blue"\cf8 \strokec8 , \cf10 \strokec10 "red"\cf8 \strokec8 , \cf10 \strokec10 "green"\cf8 \strokec8 , \cf10 \strokec10 "white"\cf8 \strokec8 , \cf10 \strokec10 "yellow"\cf8 \strokec8 , \cf10 \strokec10 "violet"\cf8 \strokec8 , \cf10 \strokec10 "orange"\cf8 \strokec8 ] draw_triangle(points, colors[depth], my_turtle) \cf6 \strokec6 if\cf8 \strokec8  depth > \cf11 \strokec11 0\cf8 \strokec8 : sierpinski([points[\cf11 \strokec11 0\cf8 \strokec8 ], get_mid(points[\cf11 \strokec11 0\cf8 \strokec8 ], points[\cf11 \strokec11 1\cf8 \strokec8 ]), get_mid(points[\cf11 \strokec11 0\cf8 \strokec8 ], points[\cf11 \strokec11 2\cf8 \strokec8 ])], depth-\cf11 \strokec11 1\cf8 \strokec8 , my_turtle) sierpinski([points[\cf11 \strokec11 1\cf8 \strokec8 ], get_mid(points[\cf11 \strokec11 0\cf8 \strokec8 ], points[\cf11 \strokec11 1\cf8 \strokec8 ]), get_mid(points[\cf11 \strokec11 1\cf8 \strokec8 ], points[\cf11 \strokec11 2\cf8 \strokec8 ])], depth-\cf11 \strokec11 1\cf8 \strokec8 , my_turtle) sierpinski([points[\cf11 \strokec11 2\cf8 \strokec8 ], get_mid(points[\cf11 \strokec11 2\cf8 \strokec8 ], points[\cf11 \strokec11 1\cf8 \strokec8 ]), get_mid(points[\cf11 \strokec11 0\cf8 \strokec8 ], points[\cf11 \strokec11 2\cf8 \strokec8 ])], depth-\cf11 \strokec11 1\cf8 \strokec8 , my_turtle) \cf6 \strokec6 def\cf8 \strokec8  \cf9 \strokec9 draw_triangle\cf8 \strokec8 (points, color, my_turtle): my_turtle.fillcolor(color) my_turtle.up() my_turtle.goto(points[\cf11 \strokec11 0\cf8 \strokec8 ][\cf11 \strokec11 0\cf8 \strokec8 ],points[\cf11 \strokec11 0\cf8 \strokec8 ][\cf11 \strokec11 1\cf8 \strokec8 ]) my_turtle.down() my_turtle.begin_fill() my_turtle.goto(points[\cf11 \strokec11 1\cf8 \strokec8 ][\cf11 \strokec11 0\cf8 \strokec8 ],points[\cf11 \strokec11 1\cf8 \strokec8 ][\cf11 \strokec11 1\cf8 \strokec8 ]) my_turtle.goto(points[\cf11 \strokec11 2\cf8 \strokec8 ][\cf11 \strokec11 0\cf8 \strokec8 ],points[\cf11 \strokec11 2\cf8 \strokec8 ][\cf11 \strokec11 1\cf8 \strokec8 ]) my_turtle.goto(points[\cf11 \strokec11 0\cf8 \strokec8 ][\cf11 \strokec11 0\cf8 \strokec8 ],points[\cf11 \strokec11 0\cf8 \strokec8 ][\cf11 \strokec11 1\cf8 \strokec8 ]) my_turtle.end_fill() \cf6 \strokec6 def\cf8 \strokec8  \cf9 \strokec9 get_mid\cf8 \strokec8 (p1, p2): \cf6 \strokec6 return\cf8 \strokec8  ((p1[\cf11 \strokec11 0\cf8 \strokec8 ]+p2[\cf11 \strokec11 0\cf8 \strokec8 ])/\cf11 \strokec11 2\cf8 \strokec8 , (p1[\cf11 \strokec11 1\cf8 \strokec8 ]+p2[\cf11 \strokec11 1\cf8 \strokec8 ])/\cf11 \strokec11 2\cf8 \strokec8 ) my_turtle = turtle.Turtle() my_win = turtle.Screen() my_points = [[-\cf11 \strokec11 200\cf8 \strokec8 ,-\cf11 \strokec11 100\cf8 \strokec8 ],[\cf11 \strokec11 0\cf8 \strokec8 ,\cf11 \strokec11 200\cf8 \strokec8 ],[\cf11 \strokec11 200\cf8 \strokec8 ,-\cf11 \strokec11 100\cf8 \strokec8 ]] sierpinski(my_points, \cf11 \strokec11 3\cf8 \strokec8 , my_turtle) my_win.exitonclick()\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \cb3 \strokec2 In the above code, we define the 
\f1\fs28 \cf2 \cb3 \strokec2 sierpinski
\f0\fs32 \cf2 \cb3 \strokec2  function that takes in the triangle points, depth, and a turtle object to draw the gasket. We also define the 
\f1\fs28 \cf2 \cb3 \strokec2 draw_triangle
\f0\fs32 \cf2 \cb3 \strokec2  function to draw each triangle and the 
\f1\fs28 \cf2 \cb3 \strokec2 get_mid
\f0\fs32 \cf2 \cb3 \strokec2  function to calculate the midpoint of each side. The 
\f1\fs28 \cf2 \cb3 \strokec2 sierpinski
\f0\fs32 \cf2 \cb3 \strokec2  function first draws the current triangle and then calls itself recursively with the three new triangles that are formed by the midpoint of each side. The recursion continues until the specified depth is reached.\
\pard\pardeftab720\partightenfactor0
\cf2 When we run the above program, it will draw the Sierpinski Gasket with a depth of 3 using the turtle module. The resulting image will be a fractal pattern consisting of triangles that are recursively subdivided into smaller triangles.\
}