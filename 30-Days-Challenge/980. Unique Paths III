def check(i,j,visited):
    if(i<0 or i>=len(visited) or j<0 or j>=len(visited[0])):
        return False
    if(visited[i][j]):
        return False
    else:
        return True
def backtrack(grid,visited,m,n,count,i,j,ans):
    
    if(grid[i][j]==2):
        if(count==1):
            ans[0]+=1
            return
        return
    if(count==0 or grid[i][j]==-1):
        return
    visited[i][j]=True
    count-=1
    # print(i,j,count,ans)
    # for k in visited:
    #     print(k)
    if(check(i-1,j,visited)):
        backtrack(grid,visited,m,n,count,i-1,j,ans)
    if(check(i+1,j,visited)):
        backtrack(grid,visited,m,n,count,i+1,j,ans)
    if(check(i,j-1,visited)):
        backtrack(grid,visited,m,n,count,i,j-1,ans)
    if(check(i,j+1,visited)):
        backtrack(grid,visited,m,n,count,i,j+1,ans)
    visited[i][j]=False
    count+=1
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        visited = [[False for i in range(n)] for j in range(m)]
        count = (m)*(n)
        ans=[0]
        flag = True
        for i in grid:
            for j in i:
                if(j==-1):
                    count-=1
        for i in range(m):
            for j in range(n):
                if(grid[i][j]==1):
                    backtrack(grid, visited, m, n, count,i,j,ans)
                    return ans[0]
